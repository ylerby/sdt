import streamlit as st
import pandas as pd
import seaborn as sns
import json
from catboost import CatBoostRegressor
import time
import random


st.set_page_config(
    page_title="Moscow Real Estate App",
    page_icon="üèôÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded",
)

st.header("–û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã", divider="orange")

st.caption(
    "–î–ª—è —Ç–æ—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –Ω–∞–º –Ω—É–∂–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä—É, –µ–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –±–ª–∏–∂–∞–π—à–µ–µ –º–µ—Ç—Ä–æ."
)

PATH_DATA = "data/moscow.csv"
PATH_DATA_VIEW = "data/dataset_to_deploy.csv"
PATH_UNIQUE_JSON = "data/unique.json"
PATH_METRO_DIST ="data/moscow_stations_distances.json"
PATH_MODEL = "models/catboost_model.cbm"
PATH_METRO_LIST = "data/metro.json"


@st.cache_data
def load_data(path):
    data = pd.read_csv(path)
    data = data.sample(20000)
    return data


@st.cache_data
def load_data_view(path):
    data = pd.read_csv(path)
    data = data.head(30000)
    return data


@st.cache_data
def load_model(path):
    model = CatBoostRegressor()
    model.load_model(PATH_MODEL)
    return model


@st.cache_data
def transform(data):
    colors = sns.color_palette("coolwarm").as_hex()
    n_colors = len(colors)
    data = data.reset_index(drop=True)
    data["metric"] = data["price"] / data["area"]
    data["label_colors"] = pd.qcut(data["metric"], n_colors, labels=colors).astype(
        "str"
    )
    return data


df = load_data(PATH_DATA)
df = transform(df)

df_view = load_data_view(PATH_DATA_VIEW )
df_view = df_view.drop(
    [
        "Unnamed: 0",
        "date",
        "time",
        "geo_lat",
        "geo_lon",
        "level_to_levels",
        "area_to_rooms",
    ],
    axis=1,
)

df_view.rename(
    columns={
        "building_type": "–¢–∏–ø –¥–æ–º–∞",
        "level": "–≠—Ç–∞–∂",
        "levels": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π",
        "rooms": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç",
        "area": "–ü–ª–æ—â–∞–¥—å",
        "kitchen_area": "–ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏",
        "object_type": "–ù–æ–≤–∏–∑–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã",
        "kremlin_dist": "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞",
        "apartment_type": "–¢–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã",
        "nearest_metro_station": "–ë–ª–∏–∂–∞–π—à–∞—è —Å—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ",
        "metro_dist": "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –º–µ—Ç—Ä–æ",
        "walk_time_to_metro": "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –¥–æ –º–µ—Ç—Ä–æ",
        "price": "–¶–µ–Ω–∞",
    },
    inplace=True,
)

st.subheader("–ö–≤–∞—Ä—Ç–∏—Ä—ã –Ω–∞ –∫–∞—Ä—Ç–µ")
st.map(data=df, latitude="geo_lat", longitude="geo_lon", color="label_colors")


st.subheader("–ü—Ä–∏–º–µ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä", divider="orange")
df_view = df_view.head(5)
st.dataframe(df_view)


with open(PATH_UNIQUE_JSON) as file:
    dict_unique = json.load(file)

with open(PATH_METRO_LIST) as file:
    dict_metro = json.load(file)

with open(PATH_METRO_DIST, "r", encoding="utf-8") as file:
    metro_data = json.load(file)

# –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å—Ç–∞–Ω—Ü–∏–∏
dist_metro = {
    station["–°—Ç–∞–Ω—Ü–∏—è"]: station["–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –ö—Ä–µ–º–ª—è (–∫–º)"] for station in metro_data
}


st.sidebar.subheader("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã", divider="orange")

building_type_mapping = {
    "–ú–æ–Ω–æ–ª–∏—Ç–Ω—ã–π": "Monolithic",
    "–ü–∞–Ω–µ–ª—å–Ω—ã–π": "Panel",
    "–ö–∏—Ä–ø–∏—á–Ω—ã–π": "Brick",
    "–ë–ª–æ—á–Ω—ã–π": "Blocky",
    "–î—Ä—É–≥–æ–π": "Other",
    "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π": "Wooden"
}

object_type_mapping = {
    "–ù–æ–≤–∞—è": "New Building",
    "–í—Ç–æ—Ä–∏—á–Ω–∞—è": "Secondary Real Estate"
}

apartment_type_mapping = {
    "–ö–≤–∞—Ä—Ç–∏—Ä–∞": "Flat",
    "–°—Ç—É–¥–∏—è": "Studio"
}


building_type = st.sidebar.selectbox("–¢–∏–ø –¥–æ–º–∞", ["–ú–æ–Ω–æ–ª–∏—Ç–Ω—ã–π", "–ü–∞–Ω–µ–ª—å–Ω—ã–π", "–ö–∏—Ä–ø–∏—á–Ω—ã–π", "–ë–ª–æ—á–Ω—ã–π", "–î—Ä—É–≥–æ–π", "–î–µ—Ä–µ–≤—è–Ω–Ω—ã–π"])
object_type = st.sidebar.selectbox("–ù–æ–≤–∏–∑–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã", ["–ù–æ–≤–∞—è", "–í—Ç–æ—Ä–∏—á–Ω–∞—è"])
apartment_type = st.sidebar.selectbox("–¢–∏–ø –∫–≤–∞—Ä—Ç–∏—Ä—ã", ["–ö–≤–∞—Ä—Ç–∏—Ä–∞", "–°—Ç—É–¥–∏—è"])

building_type = building_type_mapping[building_type]
object_type = object_type_mapping[object_type]
apartment_type = apartment_type_mapping[apartment_type]


sorted_metro = sorted(dict_metro["–°—Ç–∞–Ω—Ü–∏—è"])
nearest_metro_station = st.sidebar.selectbox(
    "–ë–ª–∏–∂–∞–π—à–∞—è —Å—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ", sorted_metro, key="–°—Ç–∞–Ω—Ü–∏—è"
)

sorted_rooms = sorted(dict_unique["rooms"])
rooms = st.sidebar.select_slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç", options=sorted_rooms)

area = st.sidebar.slider(
    "–ü–ª–æ—â–∞–¥—å –∫–≤–∞—Ä—Ç–∏—Ä—ã (–∫–≤. –º)",
    min_value=min(dict_unique["area"]),
    max_value=max(dict_unique["area"]),
)

kitchen_area = st.sidebar.slider(
    "–ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏ (–∫–≤. –º)",
    min_value=min(dict_unique["kitchen_area"]),
    max_value=max(dict_unique["kitchen_area"]),
)

level = st.sidebar.slider(
    "–ù–∞ –∫–∞–∫–æ–º —ç—Ç–∞–∂–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∞?",
    min_value=min(dict_unique["level"]),
    max_value=max(dict_unique["level"]),
)

levels = st.sidebar.slider(
    "–°–∫–æ–ª—å–∫–æ —ç—Ç–∞–∂–µ–π –≤ –¥–æ–º–µ?",
    min_value=min(dict_unique["levels"]),
    max_value=max(dict_unique["levels"]),
)


kremlin_dist = st.sidebar.slider(
    "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ (–∫–º)",
    min_value=min(dict_unique["kremlin_dist"]),
    max_value=max(dict_unique["kremlin_dist"]),
    step=0.1,
)

if nearest_metro_station in dist_metro:
    distance_to_kremlin = dist_metro[nearest_metro_station]
    rounded_distance = round(distance_to_kremlin, 2)
    st.sidebar.info(
        f"–ü–æ–¥—Å–∫–∞–∑–∫–∞. –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –≤–∞—à–µ–π –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ {nearest_metro_station} –¥–æ —Ü–µ–Ω—Ç—Ä–∞ –ú–æ—Å–∫–≤—ã: {rounded_distance} –∫–º"
    )


metro_dist = st.sidebar.slider(
    "–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –º–µ—Ç—Ä–æ (–∫–º)",
    min_value=min(dict_unique["metro_dist"]),
    max_value=max(dict_unique["metro_dist"]),
    step=0.1,
)

walk_time_to_metro = st.sidebar.slider(
    "–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω–∏–º–∞–µ—Ç –ø—É—Ç—å –ø–µ—à–∫–æ–º –¥–æ –º–µ—Ç—Ä–æ?",
    min_value=min(dict_unique["walk_time_to_metro"]),
    max_value=max(dict_unique["walk_time_to_metro"]),
    step=0.1,
)

level_to_levels = level / levels


if rooms == 0:
    area_to_rooms = area
else:
    area_to_rooms = abs(area / rooms)

st.sidebar.subheader("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", divider="orange")
st.sidebar.caption("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –≤–æ–ø—Ä–æ—Å—ã, –µ—Å–ª–∏ –∑–∞—Ç—Ä—É–¥–Ω—è–µ—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å")


ceiling = st.sidebar.number_input(
    "–£–∫–∞–∂–∏—Ç–µ –≤—ã—Å–æ—Ç—É –ø–æ—Ç–æ–ª–∫–æ–≤ (–º)", max_value=4.0, min_value=2.0, step=0.5
)

windows = st.sidebar.selectbox(
    "–ö—É–¥–∞ –≤—ã—Ö–æ–¥—è—Ç –æ–∫–Ω–∞?",
    ("–í–æ –¥–≤–æ—Ä", "–ù–∞ —É–ª–∏—Ü—É", "–í–æ –¥–≤–æ—Ü –∏ –Ω–∞ —É–ª–∏—Ü—É", "–ù–µ –∑–Ω–∞—é"),
    index=None,
    placeholder="–ö—É–¥–∞ –ø–∞–¥–∞–µ—Ç –≤–∞—à –≤–∑–≥–ª—è–¥ –ø–æ —É—Ç—Ä–∞–º?",
)

year = st.sidebar.number_input(
    "–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –¥–æ–º–∞", value=None, max_value=2023, step=1, placeholder=1980
)

repair = st.sidebar.selectbox(
    "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–∫—É—â–∏–π —Ç–∏–ø —Ä–µ–º–æ–Ω—Ç–∞",
    ("–ö–≤–∞—Ä—Ç–∏—Ä–∞ –±–µ–∑ —Ä–µ–º–æ–Ω—Ç–∞", "–ï–≤—Ä–æ", "–ö–æ—Å–º–µ—Ç–∏—á–µ—Å–∫–∏–π", "–î–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏–π"),
    index=None,
    placeholder="–¢–∏–ø —Ä–µ–º–æ–Ω—Ç–∞",
)


repair_home = st.sidebar.selectbox(
    "–°–∫–æ–ª—å–∫–æ –ª–µ—Ç —Ä–µ–º–æ–Ω—Ç—É?",
    ("–ú–µ–Ω–µ–µ –≥–æ–¥–∞", "–û—Ç –≥–æ–¥–∞ –¥–æ 5 –ª–µ—Ç", "–û—Ç 5 –¥–æ 10 –ª–µ—Ç", "–ë–æ–ª–µ–µ 10 –ª–µ—Ç"),
    index=None,
    placeholder="–î–∞–≤–Ω–æ –±—ã–ª —Ä–µ–º–æ–Ω—Ç?",
)

options = st.sidebar.multiselect(
    "–ü—Ä–æ–¥–∞–µ—Ç–µ –≤–º–µ—Å—Ç–µ —Å —Ç–µ—Ö–Ω–∏–∫–æ–π –∏ –º–µ–±–µ–ª—å—é?",
    ["–° —Ç–µ—Ö–Ω–∏–∫–æ–π", "–° –º–µ–±–µ–ª—å—é"],
    placeholder="–ß—Ç–æ-—Ç–æ –æ—Å—Ç–∞–≤–∏—Ç–µ –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ?",
)

infrastructure = st.sidebar.multiselect(
    "–£–∫–∞–∂–∏—Ç–µ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä—è–¥–æ–º —Å –¥–æ–º–æ–º",
    ["–®–∫–æ–ª–∞", "–î–µ—Ç—Å–∫–∏–π —Å–∞–¥", "–ü–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞", "–ú–∞–≥–∞–∑–∏–Ω"],
    placeholder="–ö–æ–º—Ñ–æ—Ä—Ç–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ?",
)

balcony = st.sidebar.toggle("–ï—Å—Ç—å –ª–æ–¥–∂–∏—è –∏–ª–∏ –±–∞–ª–∫–æ–Ω?")

flag = False
if area < kitchen_area:
    st.sidebar.error("–ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ –æ–±—â–µ–π –ø–ª–æ—â–∞–¥–∏!")
    flag = True


if year != None and year < 1800:
    st.sidebar.warning("–ì–æ–¥ –ø–æ—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–∂–µ—Ç—Å—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º. –í—ã —É–≤–µ—Ä–µ–Ω—ã?")


if levels < level:
    st.sidebar.error("–≠—Ç–∞–∂–µ–π –≤ –∑–¥–∞–Ω–∏–∏ –º–µ–Ω—å—à–µ, —á–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —ç—Ç–∞–∂!")
    flag = True

if building_type == "Wooden" and levels > 6:
    st.sidebar.warning(
        f"–ù–∞–º –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ –¥–µ—Ä–µ–≤—è–Ω–Ω–æ–≥–æ {levels}-—ç—Ç–∞–∂–Ω–æ–≥–æ –¥–æ–º–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í—ã —É–≤–µ—Ä–µ–Ω—ã –≤ —Å–≤–æ–µ–º –∑–∞–ø—Ä–æ—Å–µ?"
    )

if building_type = "–ö–∏—Ä–ø–∏—á–Ω—ã–π":
    

dict_data = {
    "building_type": building_type,
    "level": level,
    "levels": levels,
    "rooms": rooms,
    "area": area,
    "kitchen_area": kitchen_area,
    "object_type": object_type,
    "kremlin_dist": kremlin_dist,
    "apartment_type": apartment_type,
    "nearest_metro_station": nearest_metro_station,
    "metro_dist": metro_dist,
    "walk_time_to_metro": walk_time_to_metro,
    "level_to_levels": level_to_levels,
    "area_to_rooms": area_to_rooms,
}

cat_features = [
    "building_type",
    "object_type",
    "apartment_type",
    "nearest_metro_station",
]


data_predict = pd.DataFrame([dict_data])

for c in cat_features:
    data_predict[c] = data_predict[c].astype(str)

model = load_model(PATH_MODEL)

st.subheader("–û—Ü–µ–Ω–∫–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏", divider="orange")
st.info(
    "–ü–æ—Å–ª–µ –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–∞—à–µ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è —Å–ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞. –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º, —á—Ç–æ –æ—Ü–µ–Ω–∫–∞ –Ω–µ –±—É–¥–µ—Ç —è–≤–ª—è—Ç—å—Å—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ–π, –ø–æ—Å–∫–æ–ª—å–∫—É —Ü–µ–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –º–Ω–æ–≥–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤, –≤ —Ç–æ–º —á–∏—Å–ª–µ –∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä—ã–Ω–∫–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É."
)

if flag == False:
    button = st.sidebar.button("–û—Ü–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞—à–µ–π –∫–≤–∞—Ä—Ç–∏—Ä—ã", type="primary")

    if button:
        with st.spinner("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã!"):
            time.sleep(2)

        prediction = model.predict(data_predict)

        prediction = int(prediction[0])

        if balcony and ceiling >= 3:
            prediction += random.randrange(500000, 600000)

        if repair == "–ï–≤—Ä–æ" or repair == "–î–∏–∑–∞–π–Ω–µ—Ä—Å–∫–∏–π":
            prediction += random.randrange(2500000, 2700000)
        elif repair == "–ö–≤–∞—Ä—Ç–∏—Ä–∞ –±–µ–∑ —Ä–µ–º–æ–Ω—Ç–∞":
            prediction -= random.randrange(2200000, 2300000)

        for i in options:
            if i == any(options):
                prediction += random.randrange(1100000, 1300000)
            else:
                prediction += random.randrange(1900000, 2000000)

        for i in infrastructure:
            if i == any(infrastructure):
                prediction += random.randrange(1100000, 1300000)
            else:
                prediction += random.randrange(1900000, 2000000)

        if repair_home == "–ú–µ–Ω–µ–µ –≥–æ–¥–∞":
            prediction += random.randrange(1500000, 2000000)
        elif repair_home == "–û—Ç –≥–æ–¥–∞ –¥–æ 5 –ª–µ—Ç":
            prediction += random.randrange(800000, 900000)
        elif repair_home == "–ë–æ–ª–µ–µ 10 –ª–µ—Ç":
            prediction -= random.randrange(800000, 900000)

        if year == None:
            pass
        elif year > 2005:
            prediction += random.randrange(3000000, 4000000)

        if windows == "–í–æ –¥–≤–æ—Ü –∏ –Ω–∞ —É–ª–∏—Ü—É":
            prediction += random.randrange(800000, 900000)

        metro_stations_top = [
            "–û—Ö–æ—Ç–Ω—ã–π —Ä—è–¥",
            "–ö–∏—Ç–∞–π-–≥–æ—Ä–æ–¥",
            "–ú–∞—è–∫–æ–≤—Å–∫–∞—è",
            "–ü—É—à–∫–∏–Ω—Å–∫–∞—è",
            "–ö—É–∑–Ω–µ—Ü–∫–∏–π –º–æ—Å—Ç",
            "–ê—Ä–±–∞—Ç—Å–∫–∞—è",
            "–ß–µ—Ö–æ–≤—Å–∫–∞—è",
            "–¢–≤–µ—Ä—Å–∫–∞—è",
            "–ü–∞—Ä–∫ –∫—É–ª—å—Ç—É—Ä—ã",
            "–°–º–æ–ª–µ–Ω—Å–∫–∞—è",
            "–ü–ª–æ—â–∞–¥—å –†–µ–≤–æ–ª—é—Ü–∏–∏",
            "–õ—É–±—è–Ω–∫–∞",
        ]
        metro_stations_top_2 = [
            "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∏–º.–õ–µ–Ω–∏–Ω–∞",
            "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤—Å–∫–∏–π —Å–∞–¥",
            "–î–µ–ª–æ–≤–æ–π —Ü–µ–Ω—Ç—Ä",
            "–ö—Ä–æ–ø–æ—Ç–∫–∏–Ω—Å–∫–∞—è",
            "–¢—É—Ä–≥–µ–Ω–µ–≤—Å–∫–∞—è",
            "–¢—Ä–µ—Ç—å—è–∫–æ–≤—Å–∫–∞—è",
            "–¢–µ–∞—Ç—Ä–∞–ª—å–Ω–∞—è",
            "–ß–∏—Å—Ç—ã–µ –ø—Ä—É–¥—ã",
            "–ë–æ—Ä–æ–≤–∏—Ü–∫–∞—è",
            "–ù–æ–≤–æ–∫—É–∑–Ω–µ—Ü–∫–∞—è",
        ]
        metro_stations_top_3 = [
            "–¢–∞–≥–∞–Ω—Å–∫–∞—è",
            "–°—É—Ö–∞—Ä–µ–≤—Å–∫–∞—è",
            "–¶–≤–µ—Ç–Ω–æ–π –±—É–ª—å–≤–∞—Ä",
            "–î–∏–Ω–∞–º–æ",
            "–ë–∞—Ä—Ä–∏–∫–∞–¥–Ω–∞—è",
            "–ö–∏–µ–≤—Å–∫–∞—è",
            "–¶–°–ö–ê",
            "–ü—Ä–æ—Å–ø–µ–∫—Ç –ú–∏—Ä–∞",
            "–ë–µ–ª–æ—Ä—É—Å—Å–∫–∞—è",
            "–î–µ–ª–æ–≤–æ–π —Ü–µ–Ω—Ç—Ä",
        ]

        if nearest_metro_station in metro_stations_top:
            prediction += random.randrange(32000000, 35000000)
        elif nearest_metro_station in metro_stations_top_2:
            prediction += random.randrange(25000000, 29000000)
        elif nearest_metro_station in metro_stations_top_3:
            prediction += random.randrange(18000000, 22000000)

        formatted_predict = "{:,} —Ä—É–±–ª–µ–π".format(prediction)

        area_info = int(area)
        area_info = "{:,}".format(area_info)

        info = (
            f"{rooms}-–∫–æ–º–Ω. –∫–≤–∞—Ä—Ç–∏—Ä–∞ ¬∑ {area_info} –º¬≤ ¬∑ –ú–µ—Ç—Ä–æ {nearest_metro_station}"
        )

        st.metric(label="–ö–≤–∞—Ä—Ç–∏—Ä–∞", value=info, delta_color="off")

        st.metric(
            label="–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å",
            value=formatted_predict,
            delta=0.5,
            delta_color="inverse",
        )

        st.success("–ì–æ—Ç–æ–≤–æ!")


